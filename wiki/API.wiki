#How to use aaplot

= Basic =
Write c-file, include aaplot
{{{
#include "aaplot.h"
}}}
Compile 
{{{
gcc -lpng -lGL -lXpm
}}}

-lpng means libpng, which is used to screenshooting. (aaplot can be compiled without it)

-lXpm means libXpm, which is used to change application-icon (aaplot can be compiled without it)

-lGL are mandatory 

= API for version 0.5 =
in aaplot.h are limits of the _drawing cube_ and lots of another defaults.
{{{
double lower_x_limit = -10.0;
double upper_x_limit = 10.0;

double lower_y_limit = -5.0;
double upper_y_limit = 5.0;

double lower_z_limit = -3.0;
double upper_z_limit = 3.0;
}}}
You can change the values in your code. When you make new window (add some element to it) it gets *current* defaults.

== addRFunction ==
int addRFunction(int win,double (`*`func_ptr)(double), double step, char `*`title)   

win
 Windows number. First window is 0.

func_ptr
 Pointer to function, which is like
  double some_function(double x) {return x+1;}

step
 Stepping of x. Let say first value of x is A, then second value is A+step. And all values are A+(step `*` n), where n is integer.

title
 Title of function. Will be written in 'legend' in same color than function itself. (legend is info box, which lists all functions)

returning int
 ID_number of just added function. Its properties are changed with this id number. This id is very own. Even functions are in different windows they can't have same id number. Additional function can't have same id number which is used any table (and vica versa) 

=== Example ===
{{{
#include "aaplot.h"
double f(double x) {
return x*x;
}

int main()
{
addRFunction(0,&f,0.01,"x * x");
drawAll(); 
return 0;
}

}}}

== addR2Function ==
int addR2Function(int win,double (`*`func_ptr)(double), double x_step, double z_step, char `*`title)

win
 Windows number. First window is 0.

func_ptr
 Pointer to function, which is like
  double some_function(double x,double z) {return x+z+1;}

x_step
 Stepping of x. Let say first value of x is A, then second value is A+step. And all values are A+(step `*` n), where n is integer.

z_step
 Stepping of z.

title
 Title of function. Will be written in 'legend' in same color than function itself. (legend is info box, which lists all functions)

returning int
 ID_number of just added function. Its properties are changed with this id number. This id is very own. Even functions are in different windows they can't have same id number. Additional function can't have same id number which is used any table (and vica versa) 


=== Example ===
{{{
#include "aaplot.h"
double g(double x,double z) {
return x*z;
}

int main()
{
addR2Function(0,&f,0.01,0.01,"x * z");
drawAll(); 
return 0;
}

}}}


== addRCurve ==
int addRCurve(int win,void (`*`curve_ptr)(double,double`*`,double`*`,double`*`), double step, double lower, double upper,char `*`title)

win
 Windows number. First window is 0.

curve_ptr
 Pointer to curve, which is like
  double some_function(double t, double `*`x, double `*`y, double `*`z)  {`*`x=t;  `*`y=t;  `*`z=t;}

step
 Stepping of t. Let say first value of x is A, then second value is A+step. And all values are A+(step `*` n), where n is integer.

lower
 First value of t.

upper
 Last value of t.

title
 Title of curve. Will be written in 'legend' in same color than function itself. (legend is info box, which lists all functions)

returning int
 ID_number of just added curves. Its properties are changed with this id number. This id is very own. Even curves/functions are in different windows they can't have same id number. Additional curves can't have same id number which is used any table (and vica versa) 


=== Example ===
{{{
#include "aaplot.h"
void circle(double t, double *x, double *y, double *z) {
*x= cos(t);
*y= sin(t);
*z= 0;
}

int main(){
addRCurve(0,&circle,0.01, 0, 2*M_PI,"Circle");
drawAll();
return 0;
}


}}}
== Tables==
== addTableDataFile ==
int addTableDataFile(int win,char `*`filename , `*`title)

win
 Windows number. First window is 0.

filename
 Name of the file. Fileformat is like
 {{{
 26 2
 0.0 -4.0
 1.0 -3.6
 2.0 -3.6
 3.0 -4.0
 3.7 -3.7
 4.0 -3.0
 3.6 -1.0
 3.6  0.3
 4.0  1.0
 4.0  2.0
 2.8  4.0
 2.3  4.3
 1.0  4.0
-1.0  3.3
-2.7  3.5
-3.8  3.2
-4.0  2.2
-3.5  1.2
-3.7  0.0
-4.0 -1.2
-4.1 -3.0
-3.8 -3.7
-3.0 -4.0
-2.0 -3.6
-1.0 -3.6
 0.0 -4.0
 }}}
 First is number of points, second is how many dimension. (version 0.5 supports only 2 dimensional tables)

title
 Title of point set. Will be written in 'legend' in same color than points. (legend is info box, which lists all functions)

returning int
 ID_number of just added function. Its properties are changed with this id number. This id is very own. Even functions are in different windows they can't have same id number. Additional function can't have same id number which is used any table (and vica versa) 


== addTableDataArrays ==
int addTableDataArrays(int win,int number_of_points,double *x,double *x,  char `*`title)

win
 Windows number. First window is 0.

number_of_points
 How many points there are or you want to draw,

x,y
 Can be double[]. First point is (x[0],y[0]) and point number i is (x[i],y[i]).

title
 Title of point set. Will be written in 'legend' in same color than points itself. (legend is info box, which lists all functions)

returning int
 ID_number of just added function. Its properties are changed with this id number. This id is very own. Even functions are in different windows they can't have same id number. Additional function can't have same id number which is used any table (and vica versa) 

=== Example ===
{{{
#include "aaplot.h"
int main(){
/* you must have aalto.dat */
addTableDataFile(0,"aalto.dat" , "aalto26");
drawAll();
}}}

=== Example2 ===
{{{
#include "aaplot.h"
int main(){
int number_of_points = 10;
double *x,*y;
x= malloc(number_of_points*sizeof(double));
y= malloc(number_of_points*sizeof(double));

/*Some values*/
int i=0;
for (i=0;i<number_of_points;i++)
  {
  x[i]=i*cos(i);
  y[i]=i*sin(i);
  }
addTableDataArrays(0,number_of_points,x,y, "some_test_data");
drawAll();
}}}


=== Example3 ===
{{{
#include "aaplot.h"
int main(){
#define number_of_points 10
double x[number_of_points];
double y[number_of_points];

/*Some values*/
int i=0;
for (i=0;i<number_of_points;i++)
  {
  x[i]=i*cos(i);
  y[i]=i*sin(i);
  }
addTableDataArrays(0,number_of_points,x,y, "some_test_data");
drawAll();
}}}

== Parameterized functions ==
int addRFunctionWithP(int win,double (`*`func_ptr)(double,double`*`),double `*`para, double step, char `*`title)

int addR2FunctionWithP(int win,double (`*`func_ptr)(double,double,double`*`),double `*`para, double x_step, double z_step, char `*`title)

int addRCurveWithP(int win,void (`*`curve_ptr)(double,double`*`,double`*`,double`*`,double`*`), double `*`para, double step, double lower, double upper,char `*`title)

func_ptr / curve_ptr
 is now pointing different kind of function. There are one double`*` more 

para
 array of parameters

=== Example ===
{{{
#include "aaplot.h"
void circle_with_radius(double t, double *x, double *y, double *z, double *p) {
*x= p[0] * cos(t);
*y= p[0] * sin(t);
*z= 0;
}

int main(){
double p1[1];
p1[0]= 1.25; 

addRCurveWithP(0,&circle_with_radius,p1,0.01, 0, 2*M_PI,"Circle");
drawAll();
return 0;
}


}}}

= Changing values =
Anything that returns id number to you is called entity and can be target of attribute-changing-functions.

== changeEntityPlotSize ==
void changeEntityPlotSize (int id, float size)

id
 id number of function, curve or table

size
 new plot/point size 

==changeEntityColor ==
void changeEntityColor(int id, float red, float green, float blue)

id
 id number of function, curve or table

red,green,blue
 all in range [0,1]. They together is RGB-value. RGB-color-system is additive, which means it behaves like mixing light:
{{{
  0,0,0 = BLACK
  1,0,0 = RED
  0,1,0 = GREEN
  0,0,1 = BLUE
  1,1,1 = WHITE
}}}

==changeEntityXStepping==
Not for tables.
void changeEntityXStepping(int id, double x_step) 

id
 id number of function or curve

x_step
 New x stepping.

==changeEntityZStepping==
Not for tables.
Changing z_step of R->R function means nothing

void changeEntityXStepping(int id, double z_step) 

id
 id number of function or curve

z_step
 New z stepping.

==changeEntityTitle==
void changeEntityTitle(int id, char *title)

id
 id number of function, curve or table

title
 New title of entity.


example
{{{
int id = addRCurveWithP(0,&circle_with_radius,p1,0.01, 0, 2*M_PI,"Circle");

changeEntityColor(id, 0.5, 0.5, 0.5);
changeEntityPlotSize(id, 3.5);
}}}

 